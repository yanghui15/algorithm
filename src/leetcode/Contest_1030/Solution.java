package leetcode.Contest_1030;

import java.util.*;

/**
 * Created by yanghui on 16/10/30.
 */
public class Solution {

	class Node{
		int cur;
		ArrayList<Node> next;
		public Node(int cur){
			this.cur = cur;
			next = new ArrayList<Node>();
		}
	}

	public boolean sequenceReconstruction(int[] org, int[][] seqs) {
		if(seqs == null) return false;
		int len = org.length;
		Node node[] = new Node[len + 1];
		for(int i = 1 ; i <= len ; i ++){
			node[i] = new Node(i);
		}
		int in[] = new int[len + 1];
		int n = seqs.length;
		for(int i = 0 ; i < n ; i ++){
			int m = seqs[i].length;
			ArrayList<Integer> temp = new ArrayList<Integer>();
			for(int j = 0 ; j < m ; j ++){
				if(seqs[i][j] >= 1 && seqs[i][j] <= len)
					temp.add(seqs[i][j]);
			}
			for(int j = 0 ; j < temp.size() - 1 ; j ++){
				node[temp.get(j)].next.add(node[temp.get(j+1)]);
				in[temp.get(j+1)] ++;
			}
		}
		Queue<Node> q = new LinkedList<Node>();
		for(int i = 1 ; i <= len ; i ++){
			if(in[i] == 0){
				q.add(node[i]);
			}
		}
		int idx = 0;
		while(!q.isEmpty()){
			if(q.size() > 1) return false;
			Node top = q.poll();
			if(top.cur != org[idx]){
				return false;
			}
			idx ++;
			for(Node no : top.next){
				in[no.cur] --;
				if(in[no.cur] == 0){
					q.add(no);
				}
			}
		}
		return idx == len;
	}

	public int arrangeCoins(int n) {
		if(n == 0) return 0;
		if(n == 1) return 1;
		long left = 1 ;
		long right = n;
		long result = -1;
		while(left <= right){
			long mid = (left + right) / 2;
			if((1 + mid) * mid / 2 > n){
				right = mid - 1;
			}else{
				result = mid;
				left = mid + 1;
			}
		}
		return (int)result;
	}

	public class Interval {
		int start;
		int end;
		Interval() { start = 0; end = 0; }
		Interval(int s, int e) { start = s; end = e; }
	}

	public int[] findRightInterval(Interval[] intervals) {
		int n = intervals.length;
		int[] ans = new int[n];
		TreeMap<Integer,Integer> start = new TreeMap<Integer,Integer>();
		for(int i = 0 ; i < n ; i ++){
			if(start.containsKey(intervals[i].start)){
				continue;
			}else{
				start.put(intervals[i].start , i);
			}
		}
		Arrays.fill(ans , n+1);
		for(int i = 0 ; i < n ; i ++){
			Integer cur = start.ceilingKey(intervals[i].end);
			if(cur == null){
				ans[i] = -1;
			}else
				ans[i] = start.get(cur);
		}
		return ans;
	}

	public int eraseOverlapIntervals(Interval[] intervals) {
		if(intervals == null) return 0;
		int n = intervals.length;
		if(n <= 1) return 0;
		Arrays.sort(intervals, new Comparator<Interval>() {
			@Override
			public int compare(Interval o1, Interval o2) {
				if(o1.end == o2.end){
					return Integer.compare(o1.start , o2.start);
				}else
					return Integer.compare(o1.end , o2.end);
			}
		});
		int ans = 1;
		int last = 0;
		for(int i = 1 ; i < n ; i ++){
			if(intervals[i].start < intervals[last].end){
				ans ++;
			}else{
				last = i;
			}
		}

		return ans;
	}

	public void run(){
		int[] org = new int[]{427,813,826,332,405,781,416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276,877,976,398,811,634,428,62,938,50,704,566,441,319,819,638,146,402,782,191,253,657,121,729,178,42,275,241,744,672,116,610,300,70,929,394,214,498,590,903,942,528,623,153,530,456,611,239,885,472,890,866,67,644,364,132,837,168,553,358,187,183,569,558,362,529,876,937,284,79,622,996,349,736,815,324,927,645,317,461,400,283,252,476,322,123,804,64,912,928,889,302,340,951,478,562,336,740,234,144,257,77,980,167,936,273,337,712,452,834,1000,201,950,599,249,666,354,719,953,420,44,817,95,589,978,966,410,660,805,328,934,155,769,45,5,297,68,916,883,72,186,215,905,3,442,861,411,968,531,627,693,893,429,737,926,525,573,24,655,37,289,500,88,127,105,226,71,795,436,777,485,659,286,373,80,470,592,959,856,982,161,392,574,180,773,715,255,965,513,859,176,571,361,426,240,824,895,338,99,818,654,7,163,203,932,453,396,598,209,784,432,748,458,963,104,948,865,421,652,583,763,221,852,259,694,512,140,899,261,842,755,810,223,994,417,152,360,33,631,843,556,304,8,298,59,971,625,543,664,210,649,974,544,661,518,21,190,850,383,139,547,962,809,197,430,415,939,922,216,401,388,822,594,709,526,159,600,671,669,674,501,560,218,906,370,725,126,575,991,733,521,1,539,990,408,342,229,608,947,367,791,793,683,695,212,451,765,897,108,348,331,243,559,316,641,148,816,766,291,970,444,162,838,742,910,995,486,277,497,902,196,707,192,296,321,299,482,279,771,397,78,964,172,184,130,508,301,481,517,200,125,749,812,211,389,86,706,616,985,867,236,776,288,419,747,490,731,993,700,118,11,271,372,173,778,581,40,483,346,380,972,228,357,326,248,945,918,74,41,310,312,758,23,93,635,628,112,944,708,975,548,698,827,557,100,718,246,219,878,464,801,422,670,682,864,735,222,584,898,907,879,676,908,281,107,352,35,642,265,103,480,341,366,620,488,225,110,887,941,814,779,98,435,266,175,202,789,177,244,475,47,230,510,141,251,633,379,447,315,576,66,293,656,87,613,242,679,156,552,761,790,443,131,375,268,204,806,808,770,705,311,377,891,785,114,881,534,188,913,868,258,245,578,129,287,17,603,101,687,423,16,940,554,491,134,254,198,798,678,870,675,668,52,925,154,232,647,51,703,662,409,97,757,572,874,83,823,499,489,780,446,680,750,933,797,716,468,713,28,605,238,857,463,532,213,413,237,36,909,25,787,378,404,54,515,561,199,979,505,157,830,34,586,164,848,262,492,653,609,147,536,799,30,651,794,538,833,333,143,138,587,455,564,439,677,759,282,330,624,732,967,714,958,607,454,160,667,206,359,954,179,825,158,901,386,955,314,26,527,133,920,520,15,171,691,858,256,915,14,545,264,43,845,914,786,150,872,820,888,57,117,356,471,783,504,75,149,860,399,646,516,846,612,465,479,828,208,730,701,535,540,802,900,10,217,207,621,335,796,473,82,832,474,63,690,313,431,418,84,189,981,48,151,871,602,303,495,450,904,577,665,344,224,946,56,69,987,591,507,60,688,738,973,894,327,384,136,247,523,53,448,711,768,503,502,772,351,702,997,618,637,999,323,524,923,120,395,89,466,849,438,956,195,626,606,403,541,49,803,91,854,921,425,109,391,292,692,374,309,137,580,542,9,615,343,385,493,943,382,840,844,699,551,235,511,684,29,509,754,851,565,46,280,353,924,32,775,722,2,992,931,170,630,555,496,407,882,437,593,305,272,911,989,339,174,998,467,61,270,295,381,329,917,92,169,38,390,841,318,307,697,636,96,550,31,533,376,930,896,267,764,94,355,673,393,686,406,537,582,836,721,457,227,753,412,469,12,106,639,935,800,774,835,886,124,681,734,869,568,751,567,514,807,347,855,563,884,433,142,596,290,484,345,863,424,185,570,648,350,658,767,831,231,949,788,983,741,18,166,477,81,792,65,76,617,643,27,434,20,365,55,961,519,387,723,363,640,371,969,220,440,460,614,494,306,205,756,601,285,760,984,522,720,194,250,650,278,274,369,724,4,977,960,449,334,19,728,847,6,597,102,629,414,952,862,726,13,90,727,743,128,459,113,320,696,58,585};
		int[][] seqs = new int[][]{{416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276,877,976,398,811},{427,813,826,332,405,781,416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276,877,976,398,811,634,428,62,938,50,704,566,441,319,819,638,146,402,782,191,253},{813,826,332,405,781,416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276,877,976,398,811,634,428,62,938,50,704,566,441,319,819,638,146,402,782,191,253,657,121,729,178,42,275,241,744,672,116,610,300,70,929,394,214},{781,416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487},{717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873},{405,781},{182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276,877,976,398,811,634,428},{332,405,781,416,988,182,717,588,839,122,821,957,752,829,632,462,325,875,145,135,181,165,595,619,115,111,506,368,892,710,762,745,689,919,308,853,746,85,604,233,487,263,119,663,579,39,549,294,986,22,260,193,880,739,873,73,445,685,269,546,276},{988,182,717,588,839,122},{}};
		System.out.println(this.sequenceReconstruction(org , seqs));
	}

	public static void main(String args[]){
		new Solution().run();
	}
}
